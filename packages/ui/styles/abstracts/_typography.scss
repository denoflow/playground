@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use './variables' as *;

// Represents a typography level from the Material design spec.
@function define-typography-level(
  $font-size,
  $line-height: $font-size,
  $font-weight: $font-regular,
  $font-family: null,
  $letter-spacing: normal
) {
  @return (
    font-size: $font-size,
    line-height: $line-height,
    font-weight: $font-weight,
    font-family: $font-family,
    letter-spacing: $letter-spacing
  );
}

// Represents a collection of typography levels.
// Note: The spec doesn't mention letter spacing. The values here come from
// eyeballing it until it looked exactly like the spec examples.
@function define-typography-config(
  $font-family:
    'Inter, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif',
  $body: define-typography-level(1.4rem, 1.4, $font-regular),
  $title: define-typography-level(3rem, 1.2, $font-bold),
  $mobileTitle: define-typography-level(2rem, 1.2, $font-bold),
  $subtitle: define-typography-level(1.6rem, 1.2, $font-regular),
  $mobileSubtitle: define-typography-level(1.2rem, 1.2, $font-regular)
) {
  // Declare an initial map with all of the levels.
  $config: (
    body: $body,
    title: $title,
    mobileTitle: $mobileTitle,
    subtitle: $subtitle,
    mobileSubtitle: $mobileSubtitle,
  );

  // Loop through the levels and set the `font-family` of the ones that don't have one to the base.
  // Note that Sass can't modify maps in place, which means that we need to merge and re-assign.
  @each $key, $level in $config {
    @if map.get($level, font-family) == null {
      $new-level: map.merge(
        $level,
        (
          font-family: $font-family,
        )
      );
      $config: map.merge(
        $config,
        (
          $key: $new-level,
        )
      );
    }
  }

  // Add the base font family to the config.
  @return map.merge(
    $config,
    (
      font-family: $font-family,
    )
  );
}

// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to
// the individual properties if a value that isn't allowed in the shorthand is passed in.
@mixin font-shorthand($font-size, $font-weight, $line-height, $font-family) {
  // If any of the values are set to `inherit`, we can't use the shorthand
  // so we fall back to passing in the individual properties.
  @if (
    $font-size ==
      inherit or
      $font-weight ==
      inherit or
      $line-height ==
      inherit or
      $font-family ==
      inherit or
      $font-size ==
      null or
      $font-weight ==
      null or
      $line-height ==
      null or
      $font-family ==
      null
  ) {
    font-family: $font-family;
    font-size: $font-size;
    font-weight: $font-weight;
    line-height: $line-height;
  }
 @else {
    // Otherwise use the shorthand `font`, because it's the least amount of bytes. Note
    // that we need to use interpolation for `font-size/line-height` in order to prevent
    // Sass from dividing the two values.
    font: $font-weight #{$font-size}/#{$line-height} $font-family;
  }
}

// Utility for fetching a nested value from a typography config.
@function _mat-get-type-value($config, $level, $name) {
  @return map.get(map.get($config, $level), $name);
}

// Gets the font size for a level inside a typography config.
@function font-size($config, $level) {
  @return _mat-get-type-value($config, $level, font-size);
}

// Gets the line height for a level inside a typography config.
@function line-height($config, $level) {
  @return _mat-get-type-value($config, $level, line-height);
}

// Gets the font weight for a level inside a typography config.
@function font-weight($config, $level) {
  @return _mat-get-type-value($config, $level, font-weight);
}

// Gets the letter spacing for a level inside a typography config.
@function letter-spacing($config, $level) {
  @return _mat-get-type-value($config, $level, letter-spacing);
}

// Gets the font-family from a typography config and removes the quotes around it.
@function font-family($config, $level: null) {
  $font-family: map.get($config, font-family);

  @if $level != null {
    $font-family: _mat-get-type-value($config, $level, font-family);
  }

  // Guard against unquoting non-string values, because it's deprecated.
  @return if(
    meta.type-of($font-family) == string,
    string.unquote($font-family),
    $font-family
  );
}

// Converts a typography level into CSS styles.
@mixin typography-level($config, $level) {
  $font-size: font-size($config, $level);
  $font-weight: font-weight($config, $level);
  $line-height: line-height($config, $level);
  $font-family: font-family($config, $level);

  @include font-shorthand($font-size, $font-weight, $line-height, $font-family);
  letter-spacing: letter-spacing($config, $level);
}

@mixin short-typography-level($config, $level) {
  $font-size: font-size($config, $level);
  $font-weight: font-weight($config, $level);
  $line-height: line-height($config, $level);

  @include font-shorthand($font-size, $font-weight, $line-height, null);
}

$config: define-typography-config();

@mixin console() {
  $font-family: '"Cascadia Code", monospace';
  @include font-shorthand(1.4rem, $font-regular, 1.4, #{$font-family});
}
